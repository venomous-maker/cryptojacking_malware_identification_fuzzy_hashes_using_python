# -*- coding: utf-8 -*-
"""fuzzy_sec.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1221Xy5F0f6PjrHPTjx4hz5SOeMP-26dF
"""

!pip install fuzzywuzzy
import pandas as pd
import numpy as np
from fuzzywuzzy import process
from fuzzywuzzy import fuzz
import hashlib #for generating hashes
import random

#importing data from a dataset
#A sample of of cryptojacking malware hashes
file_path = "/content/drive/MyDrive/csv_files/SoK/VT Dataset/VT_miners.csv"
data = pd.read_csv(file_path)

#Checking data stracture
print(data.describe())

#checking sample data
print(data.head())

#checking dataset's length
print(data.count())

#Adding column headers to a dataset to avoid using first hash as a column header
data.columns = ['Number', 'Hash']
print(data.columns)

print(data.head())

"""LET'S CLEAN OUR DATA"""

print(data.isna().sum().sum(),' are NaN values found')

#hence no NaNs found, no need of cleaning
#Let's generate another dataframe with random hashed data
column1 = [i for i in range(1,101,1)]
# Let's check the data
print(column1[0:10])

#Creating column2 having hashed data with Sha-2
column2 = [random.random() for i in range(1,101)]
print(column2)

#New dictionary
dict1['Number'] = column1
dict1['Hash'] = column2
print(dict1)

#Converting the dictionary set into a dataset
data2 = pd.DataFrame(dict1)
print(data2.head())

#Converting Hash from numbers to string
data2['Hash'] = data2['Hash'].astype(str)
# Apply hashing function to the Hash column
data2['Hash'] = data2['Hash'].apply(
    lambda x: 
        hashlib.sha256(x.encode()).hexdigest()
)
#check the change
print(data2.head())

"""Having a real hashed dataframe, let's compare the data using fuzzywuzzy a fuzzy hashing comparison method"""

#Lests create lists to use during comparison
list1 = data['Hash'].tolist()
list2 = data2['Hash'].tolist()

#Getting data type
print(type(list1))
print(type(list2))

# Setting our threshold (the percentage of comparison)
threshold = 80
#Let's reduce data to minimize compilation time
list1 = list1[0:101]
data_ = []
#Iterating through the list to find the closest matching string
for i in list2:
  data_.append(process.extract(i,list1,limit=2))
data2['Matching'] = data_
data2.head()

#Iterating through the closest matches to filter out the maximum closest match
p=[]
data2_ = []
for j in data2['Matching']:
  for k in j:
    if k[1] >= threshold:
      p.append(k[0])
  data2_.append(','.join(p))
  p = []
data2['Matching'] = data2_
data2